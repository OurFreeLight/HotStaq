version: 2.1

orbs:
  browser-tools: circleci/browser-tools@2.0.0

jobs:
  test:
    docker:
      - image: cimg/node:22.16-browsers
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            npm install
            
            cat > "./.env.chrome" \<<EOF
            HTTP_PORT=3123
            DATABASE_SERVER=localhost
            DATABASE_PORT=3310
            DATABASE_USERNAME=5NKVBAt7OrzrumQyQVs
            DATABASE_PASSWORD=1BBrZbKYRUM7oiMA5oY
            DATABASE_SCHEMA=hotstaq
            INFLUX_DATABASE_SERVER=http://localhost:8091
            INFLUX_DATABASE_USERNAME=5NKVBAt7OrzrumQyQVs
            INFLUX_DATABASE_PASSWORD=1BBrZbKYRUM7oiMA5oY
            INFLUX_DATABASE_ORG=freelight
            INFLUX_DATABASE_TOKEN=Ife0HerzHrloa32PsE4yg4ixA6j7tZFSMRhvBg7akUK2e
            INFLUX_DATABASE_SCHEMA=hotstaq
            LOGGING_LEVEL=verbose
            TESTING_DEVTOOLS=0
            TESTING_RUN_HEADLESS=1
            EOF
            
            cat > "./.env.firefox" \<<EOF
            HTTP_PORT=3123
            DATABASE_SERVER=localhost
            DATABASE_PORT=3310
            DATABASE_USERNAME=5NKVBAt7OrzrumQyQVs
            DATABASE_PASSWORD=1BBrZbKYRUM7oiMA5oY
            DATABASE_SCHEMA=hotstaq
            INFLUX_DATABASE_SERVER=http://localhost:8091
            INFLUX_DATABASE_USERNAME=5NKVBAt7OrzrumQyQVs
            INFLUX_DATABASE_PASSWORD=1BBrZbKYRUM7oiMA5oY
            INFLUX_DATABASE_ORG=freelight
            INFLUX_DATABASE_TOKEN=Ife0HerzHrloa32PsE4yg4ixA6j7tZFSMRhvBg7akUK2e
            INFLUX_DATABASE_SCHEMA=hotstaq
            LOGGING_LEVEL=verbose
            TESTING_DEVTOOLS=0
            TESTING_RUN_HEADLESS=1
            EOF
      - run:
          name: Build and install globally
          command: |
            npx turbo run build
            npx turbo run buildweb
            npx turbo run buildwebdebug
            npm run version-check
            
            sudo npm -g install .
            
            npm run build-test-api
      - run:
          name: Check if everything built correctly
          command: |
            ls ./build/
            ls ./build-web/HotStaq.js
            ls ./build-web/HotStaq.min.js
            ls ./build-web/HotStaqTests_HelloWorldAPI.js
            ls ./build-web/HotStaqTests.js
      - browser-tools/install_browser_tools
      - run:
          name: Check Chrome Installation
          command: |
            google-chrome --version
            chromedriver --version
            firefox --version
            geckodriver --version
            java -jar /usr/local/bin/selenium.jar --version
      # Will attempt to get this to work again later. Will be great for testing on multiple different browsers.
      # - run:
      #     name: "Prepare for Testing"
      #     command: |
      #       java -jar /usr/local/bin/selenium.jar -role hub &
      #       sleep 2
      #       java -Dwebdriver.chrome.driver="/usr/local/bin/chromedriver" -jar /usr/local/bin/selenium.jar -role node &
      # Will attempt to get this to work again later

      # Execute Chrome Tests
      - run:
          name: "Chrome Test: Browsers"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 5000 --colors ./build/tests/browser/**/*.js
      - run:
          name: "Chrome Test: Components"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 15000 --colors ./build/tests/components/**/*.js
      - run:
          name: "Chrome Test: Create"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 5000 --colors ./build/tests/create/**/*.js
      - run:
          name: "Chrome Test: Generator"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 5000 --colors ./build/tests/generator/**/*.js
      - run:
          name: "Chrome Test: Hotsite"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 5000 --colors ./build/tests/hotsite/**/*.js
      - run:
          name: "Chrome Test: Local"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 5000 --colors ./build/tests/local/**/*.js
      - run:
          name: "Chrome Test: Parsing"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 5000 --colors ./build/tests/parsing/**/*.js
      - run:
          name: "Chrome Test: Server"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 5000 --colors ./build/tests/server/**/*.js
      - run:
          name: "Chrome Test: Creator"
          command: |
            export $(cat .env.chrome | xargs)
            npx mocha --timeout 5000 --colors ./build/tests/create/**/*.js

      # Execute Firefox Tests -- Someday...
      # - run:
      #     name: "Firefox Test: Browsers"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/browser/**/*.js
      # - run:
      #     name: "Firefox Test: Components"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/components/**/*.js
      # - run:
      #     name: "Firefox Test: Create"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/create/**/*.js
      # - run:
      #     name: "Firefox Test: Generator"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/generator/**/*.js
      # - run:
      #     name: "Firefox Test: Hotsite"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/hotsite/**/*.js
      # - run:
      #     name: "Firefox Test: Local"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/local/**/*.js
      # - run:
      #     name: "Firefox Test: Parsing"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/parsing/**/*.js
      # - run:
      #     name: "Firefox Test: Server"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/server/**/*.js
      # - run:
      #     name: "Firefox Test: Creator"
      #     command: |
      #       export $(cat .env.firefox | xargs)
      #       npx mocha --timeout 5000 --colors ./build/tests/create/**/*.js
  publish:
    docker:
      - image: cimg/node:lts
        environment:
          NPM_ACCESS_TOKEN: $NPM_ACCESS_TOKEN
          PUBLISH_LIBRARY: $PUBLISH_LIBRARY
          PUSH_IMAGES: $PUSH_IMAGES
          DOCKER_USERNAME: $DOCKER_USERNAME
          DOCKER_PASSWORD: $DOCKER_PASSWORD
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Install dependencies
          command: |
            npm install
      - run:
          name: Build
          command: |
            npx turbo run build
            npx turbo run buildweb
            npm run version-check
      - run:
          name: Check if everything built correctly
          command: |
            ls ./build/
            ls ./build-web/HotStaq.js
            ls ./build-web/HotStaq.min.js
      - run:
          name: Publish library
          command: |
            if [ "$PUBLISH_LIBRARY" == "1" ]; then
              echo "//registry.npmjs.org/:_authToken=$NPM_ACCESS_TOKEN" > ./.npmrc
              npm publish --ignore-scripts
            fi
      # Don't build/push Docker images as they aren't as secure as what HotStaq itself generates for each app.
      # - run:
      #     name: Build Docker Images
      #     command: |
      #       if [ "$PUSH_IMAGES" == "1" ]; then
      #         # Build Node 18 images
      #         ./build.sh 18 0

      #         # Build Node 16 images. Node 16 is still latest for now
      #         ./build.sh 16 1
      #       fi
      # - run:
      #     name: Push Docker Images
      #     command: |
      #       if [ "$PUSH_IMAGES" == "1" ]; then
      #         echo "$DOCKER_PASSWORD" | docker login -u "$DOCKER_USERNAME" --password-stdin

      #         # Build Node 18 images
      #         ./push.sh 18 0

      #         # Build Node 16 images. Node 16 is still latest for now
      #         ./push.sh 16 1
      #       fi

workflows:
  hotstaq:
    jobs:
      - test:
          filters:
            branches:
              only: 
                - dev
                - master
      - publish:
          requires:
            - test
          filters:
            branches:
              only: 
                - master