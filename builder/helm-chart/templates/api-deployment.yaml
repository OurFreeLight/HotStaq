{{- if .Values.app_api.enabled -}}
{{- $databaseServer := .Values.app_api.database.server -}}
{{- if .Values.database.deploy -}}
{{- $databaseServer = include "app.serviceAccountName" . -}}
{{- $databaseServer = print $databaseServer "-db-service" -}}
{{- end -}}
apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "app.fullname" . }}-api
  labels:
    {{- include "app.labels" . | nindent 4 }}
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "app.selectorLabels" . | nindent 6 }}
  template:
    metadata:
      {{- with .Values.podAnnotations }}
      annotations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      labels:
        {{- include "app.selectorLabels" . | nindent 8 }}
	{{- with .Values.podLabels }}
        {{- toYaml . | nindent 8 }}
        {{- end }}
    spec:
      {{- if .Values.imageSettings.pullSecrets }}
      imagePullSecrets:
        - name: {{ .Values.imageSettings.pullSecrets }}
      {{- end }}
      serviceAccountName: {{ include "app.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      initContainers:
        - name: app-init
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: busybox:1.36
          imagePullPolicy: IfNotPresent
          command: ["/bin/sh", "-c"]
          args:
            - |
              echo "Waiting for database to be ready at {{ $databaseServer }}:{{ .Values.app_api.database.port }}"
              while ! nc -z {{ $databaseServer }} {{ .Values.app_api.database.port }}; do
                sleep 1
              done
              echo "Database ready"
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
      containers:
        - name: app-api
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.app_api.image }}"
          imagePullPolicy: {{ .Values.imageSettings.pullPolicy }}
          ports:
            - name: api
              containerPort: 5000
              protocol: TCP
          livenessProbe:
            httpGet:
              path: /
              port: api
          readinessProbe:
            httpGet:
              path: /
              port: api
          env:
            - name: SERVER_TYPE
              value: "api"
            - name: LOG_LEVEL
              value: "{{ .Values.app_api.logLevel }}"
            - name: API_HTTP_PORT
              value: "5000"
            - name: BASE_URL
              value: "{{ .Values.app_api.baseWebUrl }}"
            - name: BASE_API_URL
              value: "{{ .Values.app_api.baseApiUrl }}"
            - name: JWT_SECRET_KEY
              value: "{{ .Values.app_api.jwtSecretKey }}"
            - name: RECAPTCHA_KEY
              value: "{{ .Values.app_api.recaptchaKey }}"
            - name: DATABASE_SERVER
              value: "{{ $databaseServer }}"
            - name: DATABASE_PORT
              value: "{{ .Values.app_api.database.port }}"
            - name: DATABASE_USERNAME
              value: "{{ .Values.app_api.database.username }}"
            - name: DATABASE_PASSWORD
              value: "{{ .Values.app_api.database.password }}"
            - name: DATABASE_SCHEMA
              value: "{{ .Values.app_api.database.schema }}"
            - name: AWS_SES_REGION
              value: "{{ .Values.app_api.aws.ses.region }}"
            - name: AWS_ACCESS_KEY_ID
              value: "{{ .Values.app_api.aws.ses.accessKey }}"
            - name: AWS_SECRET_ACCESS_KEY
              value: "{{ .Values.app_api.aws.ses.secretKey }}"
            - name: FILE_STORAGE_LOCATION
              value: {{ .Values.app_api.fileStorage.location | quote }}
            - name: SEED_ISSUE_STATUSES
              value: '[{ "name": "Draft", "description": "The issue is not ready to be done, this needs to be thought out more and refined." }, { "name": "To Do", "description": "The issue is ready to be done." }, { "name": "In Progress", "description": "The issue is in progress." }, { "name": "Ready for Review", "description": "The issue has work completed and is ready to be reviewed." }, { "name": "Done", "description": "The issue is complete." }, { "name": "Rejected", "description": "The issue was rejected." }]'
            - name: SEED_USERS
              value: "[{ \"userType\": \"admin\", \"firstName\": \"{{ .Values.app_api.defaultAdminUser.firstName }}\", \"lastName\": \"{{ .Values.app_api.defaultAdminUser.lastName }}\", \"displayName\": \"{{ .Values.app_api.defaultAdminUser.displayName }}\", \"email\": \"{{ .Values.app_api.defaultAdminUser.email }}\", \"password\": \"{{ .Values.app_api.defaultAdminUser.password }}\", \"verified\": true }]"
          resources:
            {{- toYaml .Values.app_api.apiResources | nindent 12 }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
{{- end -}}